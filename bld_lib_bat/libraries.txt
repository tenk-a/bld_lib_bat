## 最初に

readme.md を読むこと. それ前提で以下.
(ここでも とりあえず ライブラリをまとめ置くディレクトリを libs_vc とする)



## misc_inc/, misc_lib/ に置くモノ、置かないモノ

大きいライブラリは、それらの標準のincludeやlibのパスを使う.
- 現状 boost, wxWidgets, fltk

比較的小さいライブラリは misc_inc/ , misc_lib/ にまとめる.
- 現状 glfw3, libzip, libbz2, libjpeg, libjpeg-turbo, libpng, libtiff, libogg, libvorbis

lib_inc/ にはライブラリ別にディレクトリを掘り、その中にヘッダを入れている.
置かれるヘッダは 本来のヘッダをincludeするラッパー.



## 生成されるライブラリのディレクトリやファイル名について

misc_lib/ に入るライブラリは、release ビルドかdebugビルドか、またランタイムがdllかstaticかで
- libs_vc/misc_lib/vc_x86
- libs_vc/misc_lib/vc_x86_debug
- libs_vc/misc_lib/vc_x86_static
- libs_vc/misc_lib/vc_x86_static_debug
- libs_vc/misc_lib/vc_x86
- libs_vc/misc_lib/vc_x86_debug
- libs_vc/misc_lib/vc_x86_static
- libs_vc/misc_lib/vc_x86_static_debug

のようにディレクトリ別になる. 
ディレクトリ名は、世間一般？にvc++express版のこともあってかdllランタイム版が基本のようなので、それらに倣い、
_debugがあればdebugビルド(なければrelease)、_staticがあればstaticランタイム(なければdllランタイム:msvcrt???.dllを使う)とした。

生成される各ライブラリのファイル名は、なるべく元のビルドのままにしたかったが、debugビルドやランタイムの区別のため、
元とは違うポストフィックス(_debugや_static)をつけている場合もある。 実際に生成されたファイル名を確認のこと.

ターゲットライブラリ自身のdll版は、ビルドに用意されていれば一応ビルドしている。
(が用意されていないターゲットも多いので...)

dllライブラリ版は用意されている場合は、staticライブラリ版を別名で生成している(ディレクトリ分けはしていない)。
dllライブラリ版としては[_static]無ディレクトリのものを使うことになるだろう。
(ランタイムがstaticでターゲットがdllとかも組み合わせ上 生成される場合もありえるが使えるのか不明)

dllライブラリ版がある場合は、元々ライブラリ名に _static や -static が後ろについていることもあり、そうでないものもそれに倣った。

※紛らわしいが、ディレクトリ名のstatic はランタイムを表し、ライブラリファイル名に付くstaticはターゲットライブラリがstaticリンクであることを表している。

※ 私自身は、staticランタイム＆staticターゲットライブラリが主目的なので、他はおざなりかもしれない。



## makefileやvcxproj等に対する文字列置換

ものによっては、makefile や sln,vcxproj ファイルの特定の文字列を置換したファイルを生成する必要があり、
cmd.exeの置換機能では対処しきれないケースもあったため、簡易なテキスト置換ツール
  tiny_replstr(.cpp)
を バッチ実行時に(未生成なら)コンパイルして使用している。


## bld1_????.bat バッチ

bld_????.bat は実際には bld1_????.bat を呼び出している.
bld1_????.bat は各ライブラリのビルドを１回行うためのバッチで、何がどれだけ生成されるかは、各ライブラリによって違う.
(一度に release|debug、static|dllランタイムライブラリ、static|dllライブラリ、のファイルを生成するものもあれば、どれか１,2個の場合もあり)


## 各ライブラリについて

もともとのビルド環境のmakefile等の引数指定で、コンパイラ・オプション変更して構築している。
単純に元の環境でビルドしたものとは(オプティマイズ等)違ったライブラリになっているので注意。

### misc_inc,misc_lib 配置のもの

* zlib
- データ(ファイル)圧縮関係
- bld_zlib.bat
- ディレクトリは zlib-?.?.?
- 試したバージョンは zlib-1.2.8
- win32/Makefile.vc の引数でCFLAGS等指定してコンパイルオプションを変えている.
- dllライブラリ版を使用する場合は、zlib.h のinclude前にZLIB_DLLを#defineしておく必要がある.
- libpng, boost, wxWidgets, openFramework 等 各種ライブラリから ソースなり .lib なりが参照される.


* bzip2(libbz2)
- データ(ファイル)圧縮関係
- bld_bzip2.bat
- ディレクトリは bzip2-?.?.? 　- 試したバージョンは bzip2-1.0.6
- makefile.msc の引数でOPTFLAGS等各種指定してビルド.
- boost からソースincludeされる.


* lpng(libpng)
- png画像ファイル関係
- bld_lpng.bat
- ディレクトリは lpng???? 　- 試したバージョンは lpng1616
- zlib 必須
- scripts/makefile.vcwin32 の引数でCFLAGS,CPPFLAGSを設定してビルド.


* jpeg(libjpeg)
- jpeg画像ファイル関係
- bld_jpeg.bat
- ディレクトリは jpeg-?? 　- 試したバージョンは jpeg-9a
- makefile.vc の引数で、cflags等の各種設定を変えてビルド。


* libjpeg-turbo
- jpeg画像ファイル関係. libjpegの派生
- bld_libjpeg-turbo.bat
- ディレクトリは libjpeg-turbo-* 　- 試したバージョンは libjpeg-turbo-code-1537-trunk
- turbo版はlibjpegの派生で、libjpeg,libjpeg-turboの混在リンクは不可.
- cmake, nasm 必須
- DLLランタイム版のビルドは用意されていないので、無理やりバッチ内で、flags.make や CMakeLists.txt を書き換えた別ファイルを生成してビルド.


* tiff(libtiff)
- tiff画像ファイル関係
- bld_tiff.bat
- ディレクトリは tiff-?.?.? 　- 試したバージョンは tiff-4.0.3
- zlib, libjeg 利用. なくてもビルドできるが圧縮未対応になるので、予め zlib, libjpeg をビルド済のこと.
- Makefile.vc の引数で各種指定してビルド.


* libharu
- pdf関係
- bld_libharu.bat
- ディレクトリは libharu-* 　- 試したバージョンは libharu-RELEASE_2_3_0
- zlib, lpng 必須. 予め ビルド済みのこと.
- demo をコンパイルすると jpfont_demo.exe の実行でエラー。jpfont_demo.c 中のフォント名 MS-Mincyo が原因. 全てMS-Minchoに置換すればok.
- なので libharu をコンパイルする場合は予め 
- script/makefile.msvc の引数で、CFLAGS,LDFLAGS等の各種設定を変えてビルド。


* glfw3
- OpenGL 関係
- bld_glfw.bat
- ディレクトリは glfw-3.?.? 　- 試したバージョンは glfw-3.1.1
- CMake の引数で所定の変数を設定してビルド.
- 最終的にmisc_lib/へコピーされるが、ビルド中のライブラリ生成ディレクトリは元とは多少違う.
-- glfw-?.?.?/lib/ の下に vc??_x??[_static][_debug]  のようなディレクトリを作りその下に.libを配置.


* libvorbis
- 音声圧縮関係 (oggで使われる)
- bld_libvorbis.bat
- ディレクトリは libvorbis-?.?.? 　- 試したバージョンは libvorbis-1.3.5
- 用意された vc sln 環境を使うが、vs2012(vc11),vs2013(vc12)用は vs2010(vc10)環境から生成している.
- *_static.sln はdllランタイム前提だったので、_static.vcxproj 等をバッチ内で書き換えてstaticランタイム版をビルド.
- (ビルド環境内では dllランタイム版は _rtdll をつけて生成し、misc_libへのコピー時に_staticに付け直している).
- tiny_replstr 使用
- libogg で使う


* libogg
- ogg関係
- bld_libogg.bat
- ディレクトリは libvogg-?.?.? 　- 試したバージョンは libogg-1.3.2
- msbuildで libogg_static.sln, libogg_dynamic.sln に所定の引数与えてビルド. 
- dllランタイム用が無いのでバッチ内でlibogg_static.slnからdllランタイム用slnを生成してビルド.
- 最終的にmisc_lib/へコピーされるが、ビルド中のライブラリ生成ディレクトリは元とは多少違う.
-- libvorbis-?.?.?/lib/ の下に vc??_x??[_static][_debug]  のようなディレクトリを作りその下に.libを配置.
- (ビルド環境内では dllランタイム版は _rtdll をつけて生成し、misc_libへのコピー時に_staticに付け直している).
- tiny_replstr 使用
- libvorbis 必須. ※ _static版のランタイム指定が liboggとlibvorbisで違うような... dll(_dynamic)ライブラリ版しか使ってないの？


### misc*系に置かないモノ

* boost
- 巨大汎用ライブラリ
- bld_boost.bat
- ディレクトリは boost_?_??_? 　- 試したバージョンは boost_1_58_0
- でっかいし環境整ってるので、boostの環境のまま使用。
- vc_libs/直下に zlib*, bzip2* のフォルダを予め用意してあれば、それらを使ってライブラリ構築する.
- ※ boost環境内でzlib,libbz2を含んだライブラリが作られるので、予めzlibやlibbz2を構築する必要はない.
- ※jpegやpngについては現状未対応
- .lib は libs_vc/boost/stage/vc??_x??[_debug][_static]/ に生成される


* wxWidgets v3
- GUIフレームワーク
- bld_wxWidgets.bat
- ディレクトリは wxWidgets-3.?.? 　- 試したバージョンは wxWidgets-3.0.2
- でっかいし環境整ってるので、wxWidgetsの環境のまま使用。
- makefile.vc に所定の引数渡してビルド.


* fltk
- GUIフレームワーク
- bld_fltk.bat
- ディレクトリは fltk-?.?.? 　- 試したバージョンは fltk-1.3.3
- でっかいので、fltkの環境のまま使用。
- dllランタイム版は、msbuild fltk.sln で Configuration, Platform を指定してビルド.
- static ランタイム版やx64版は用意されていないので、.slnや.vcxprojを無理やり書き換えたものを生成してビルド.
- zlibやpngライブラリを使っているが、ソースは予め配布ライブラリ内に含まれている.
- ライブラリの生成場所は元と多少違い、fltk-?.?.?/lib/ 下に以下のディレクトリを作って、その中に.libを配置.
-- vc?_x86/        　　―― x86 dllランタイム版
-- vc?_x86_static/ 　　―― x86 staticランタイム版
-- vc?_x64/        　　―― x64 dllランタイム版
-- vc?_x64_static/ 　　―― x64 staticランタイム版
- デバッグ用ライブラリについては、元のまま 最後に d がついたモノを使うことになる.
- tiny_replstr 使用
